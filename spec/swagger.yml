swagger: '2.0'

info:
  version: '1.0.0'
  title: 'Auction'
  license:
    name: ''

schemes:
  - 'http'

paths:
  /signup:
    post:
      summary: SignUp
      operationId: 'signup'
      parameters:
        - in: body
          name: body
          description: 'User object'
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        200:
          description: 'Return user entity'
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/User'
        400:
          description: 'Validation error'
          schema:
            $ref: '#/definitions/Error'

  /confirmation/{uuidToken}:
    post:
      summary: 'Confirmation profile'
      operationId: confirmation
      parameters:
        - in: path
          name: uuidToken
          schema:
            type: string
          required: true
      responses:
        200:
          description: 'Profile confirmed'
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/User'
        404:
          description: 'Model not found'
          schema:
            $ref: '#/definitions/Error'

        403:
          description: 'Token revoked'
          schema:
            $ref: '#/definitions/Error'

  /password/recovery:
    post:
      summary: 'Password recovery'
      operationId: passwordRecovery
      parameters:
        - in: body
          name: body
          description: 'User email'
          required: true
          schema:
            $ref: '#/definitions/PasswordRecovery'
      responses:
        200:
          description: 'Check email with password recovery link'
          schema:
            type: object
            properties:
              data:
                type: string
                example: null
        400:
          description: 'Validation error'
          schema:
            $ref: '#/definitions/Error'

        401:
          description: 'Unauthorized. Email not confirmed'
          schema:
            $ref: '#/definitions/Error'
        403:
          description: 'Token exists'
          schema:
            $ref: '#/definitions/Error'

  /password/update/{uuidToken}:
    post:
      summary: 'Password update'
      operationId: passwordUpdate
      parameters:
        - in: path
          name: uuidToken
          required: true
          schema:
            type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/PasswordUpdate'
      responses:
        200:
          description: 'Password updated'
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/User'
        404:
          description: 'Token not found'
          schema:
            $ref: '#/definitions/Error'
        400:
          description: 'Validation error'
          schema:
            $ref: '#/definitions/Error'


definitions:

  PasswordRecovery:
    type: object
    properties:
      email:
        type: string
        example: 'example1@g.com'

  Token:
    type: object
    properties:
      token:
        type: string

  PasswordUpdate:
    type: object
    properties:
      password:
        type: string
        example: '12345678'
      password_confirmation:
        type: string
        example: '12345678'

  ValidationItem:
    type: object
    properties:
      field:
        type: string
      message:
        type: string
      validation:
        type: string

  Error:
    type: object
    properties:
      errors:
        type: array
        items:
          $ref: '#/definitions/ValidationItem'
      message:
        type: string

  User:
    type: object
    properties:
      id:
        type: integer
        required: false
        readOnly: true
      email:
        type: string
        example: 'example1@g.com'
      phone:
        type: string
        example: '234234237423'
      password:
        type: string
        example: '12345678'
      first_name:
        type: string
        example: 'FirstName'
      lastname:
        type: string
        example: 'LastName'
      birth_day:
        format: date
        pattern: '\d{4}-\d{1,2}-\d{1,2}'
        type: string
        example: '1996-11-10'
    required:
      - email
      - password
      - phone
      - first_name
      - lastname
      - birthday
