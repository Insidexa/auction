swagger: '2.0'

info:
  version: '1.0.0'
  title: 'Auction'
  license:
    name: ''

schemes:
  - 'http'

paths:
  /signup:
    post:
      summary: 'SignUp'
      operationId: 'signup'
      parameters:
        - in: body
          name: body
          description: 'User object'
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        200:
          description: 'Return user entity'
          headers:
            JWTToken:
              type: string
              description: 'JWT token'
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/User'
        422:
          description: 'Validation error'
          schema:
            $ref: '#/definitions/ValidationError'

  /signin:
    post:
      summary: 'sign up'
      operationId: signUp
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/SignIn'
      responses:
        200:
          description: 'Successfully signed in'
          headers:
            JWTToken:
              type: string
              description: 'Bearer token'
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/User'
        422:
          description: 'Validation error'
          schema:
            $ref: '#/definitions/ValidationError'
        401:
          description: 'AccountNotConfirmed: Email not confirmed'
          schema:
            $ref: '#/definitions/AppError'
        404:
          description: 'User not found'
          schema:
            $ref: '#/definitions/AppError'

  /confirmation/{confirmationToken}:
    post:
      summary: 'Confirmation profile'
      operationId: confirmation
      parameters:
        - in: path
          name: confirmationToken
          schema:
            type: string
          required: true
      responses:
        200:
          description: 'Profile confirmed'
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/User'
        404:
          description: 'Model not found'
          schema:
            $ref: '#/definitions/AppError'

  /password/recovery:
    post:
      summary: 'Password recovery'
      operationId: passwordRecovery
      parameters:
        - in: body
          name: body
          description: 'User email'
          required: true
          schema:
            $ref: '#/definitions/PasswordRecovery'
      responses:
        200:
          description: 'Check email with password recovery link'
          schema:
            type: object
            properties:
              data:
                type: string
                example: null
        422:
          description: 'Validation error'
          schema:
            $ref: '#/definitions/ValidationError'

        401:
          description: 'AccountNotConfirmed: Email not confirmed'
          schema:
            $ref: '#/definitions/AppError'

  /password/update/{recoveryToken}:
    post:
      summary: 'Password update'
      operationId: passwordUpdate
      parameters:
        - in: path
          name: recoveryToken
          required: true
          schema:
            type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/PasswordUpdate'
      responses:
        200:
          description: 'Password updated'
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/User'
        404:
          description: 'Token not found'
          schema:
            $ref: '#/definitions/AppError'
        422:
          description: 'Validation error'
          schema:
            $ref: '#/definitions/ValidationError'

  /marketplace/lots:
    get:
      security:
        - JWTToken: []
      summary: 'List lots only in process status'
      operationId: allLots
      responses:
        200:
          description: 'List Lots'
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/LotList'
              meta:
                $ref: '#/definitions/PaginationMeta'
  /marketplace/lots/{id}:
    get:
      security:
        - JWTToken: []
      summary: 'Return lot'
      operationId: showLot
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: >
            Lot entity loaded with bids.
            Load order ( if exists for customer ) only for seller and customer
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/Lot'
        404:
          description: 'Model not found'
          schema:
            $ref: '#/definitions/AppError'

  /profile/lots/self:
    get:
      security:
        - JWTToken: []
      summary: 'Lots list with filtering'
      operationId: myLots
      parameters:
        - in: query
          name: type
          required: false
          schema:
            type: string
            enum:
              - all
              - created
              - participation
          default: 'all'
        - in: query
          name: page
          required: true
          schema:
            type: integer
          default: 1
      responses:
        200:
          description: 'List Lots'
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/LotList'
              meta:
                $ref: '#/definitions/PaginationMeta'
  /profile/lots:
    post:
      security:
        - JWTToken: []
      summary: 'Create lot'
      operationId: createLot
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Lot'
      responses:
        200:
          description: 'Successfully created lot'
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/Lot'
        422:
          description: 'Validation error'
          schema:
            $ref: '#/definitions/ValidationError'
  /profile/lots/{id}:
    delete:
      security:
        - JWTToken: []
      summary: 'Remove lot when PENDING STATUS'
      operationId: deleteLot
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        204:
          description: 'Null response'
        403:
          description: 'LotActiveCannotDelete: Delete only in PENDING status'
          schema:
            $ref: '#/definitions/AppError'
        404:
          description: 'Model not found'
          schema:
            $ref: '#/definitions/AppError'
    put:
      security:
        - JWTToken: []
      summary: 'Update lot only PENDING status'
      operationId: updateLot
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Lot'
      responses:
        200:
          description: 'Successfully updated lot'
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/Lot'
        403:
          description: 'LotActiveCannotDelete: Delete only in PENDING status'
          schema:
            $ref: '#/definitions/AppError'
        404:
          description: 'Lot not found'
          schema:
            $ref: '#/definitions/AppError'
        422:
          description: 'Validation error'
          schema:
            $ref: '#/definitions/ValidationError'
  /profile/bids:
    post:
      security:
        - JWTToken: []
      summary: createLotBid
      operationId:
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Bid'
      responses:
        200:
          description: >
            bid creation, is proposed price equal to lot estimated price
            lot closed
            return bid with isWinner flag
          schema:
            $ref: '#/definitions/Bid'
        403:
          description: 'CannotBuyYourselfLot'
          schema:
            $ref: '#/definitions/AppError'
        422:
          description: 'Proposed price be greater than prev bid proposed price'
          schema:
            $ref: '#/definitions/AppError'
  /profile/orders/{id}:
    get:
      security:
        - JWTToken: []
      summary: 'Get order, only allow winner user or seller ( by lot id )'
      operationId: showOrder
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 'Order'
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/Order'
        404:
          description: 'Model not found'
          schema:
            $ref: '#/definitions/AppError'

    put:
      security:
        - JWTToken: []
      summary: 'Update order address only in pending status'
      operationId: updateOrder
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/OrderUpdate'
      responses:
        200:
          description: 'Order updated'
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/Order'
        403:
          description: 'Forbidden'
        422:
          description: 'Validation error or ArrivalTypeNotExists'
          schema:
            $ref: '#/definitions/AppError'
        404:
          description: 'Model not found'
          schema:
            $ref: '#/definitions/AppError'

  /profile/orders/{id}/execute:
    put:
      security:
        - JWTToken: []
      summary: 'Seller execute order (send to customer)'
      operationId: sellerExecute
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        200:
          description: 'Execute order by seller'
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/Order'
        403:
          description: 'Forbidden'
        404:
          description: 'Model not found'
          schema:
            $ref: '#/definitions/AppError'
  /profile/orders/{id}/receive:
    put:
      security:
        - JWTToken: []
      summary: 'Customer receive order'
      operationId: customerReceive
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        200:
          description: 'Customer received order'
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/Order'
        403:
          description: 'Forbidden'
        404:
          description: 'Model not found'
          schema:
            $ref: '#/definitions/AppError'

  /marketplace/arrival-types:
    get:
      security:
        - JWTToken: []
      summary: 'List arrival types'
      operationId: allArrivalTypes
      responses:
        200:
          description: 'List'
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/ArrivalTypeList'

securityDefinitions:
  JWTToken:
    type: apiKey
    in: header
    name: Authorization
    description: 'Example: Authorization Bearer bf24725aa32d1febc3477b61dc32220aBHbny43RsEjVTTR35t2bcOkrJtACkjI4HkATEOHNDMgdQfwouIi0OTDlXV6myY8K'

definitions:

  ArrivalTypeList:
    type: array
    items:
      $ref: '#/definitions/ArrivalType'

  ArrivalType:
    type: object
    properties:
      id:
        type: integer
        readOnly: true
      delivery_type_id:
        type: integer
        readOnly: true
      name:
        type: string
      created_at:
        type: string
        readOnly: true
      updated_at:
        type: string
        readOnly: true

  OrderUpdate:
    type: object
    properties:
      arrival_location:
        type: string
      arrival_type_id:
        type: integer
    required:
      - arrival_location
      - arrival_type_id

  Order:
    type: object
    properties:
      id:
        type: integer
        readOnly: true
      arrival_location:
        type: string
      arrival_type:
        type: string
      status:
        type: integer
        readOnly: true
      bid_id:
        type: integer
        readOnly: true
      lot_id:
        type: integer
      user_id:
        type: integer
        readOnly: true
      created_at:
        type: string
        readOnly: true
      updated_at:
        type: string
        readOnly: true
    required:
      - arrival_location
      - arrival_type
      - lot_id

  Bid:
    type: object
    properties:
      id:
        type: integer
        readOnly: true
      proposed_price:
        type: number
        example: 12
        description: 'number, float'
      lot_id:
        type: integer
      created_at:
        type: string
        readOnly: true
      updated_at:
        type: string
        readOnly: true
      isWinner:
        type: boolean
        readOnly: true
        description: 'Only getting when store bid'
    required:
      - proposed_price
      - lot_id

  PaginationMeta:
    type: object
    properties:
      total:
        type: string
      lastPage:
        type: number
      perPage:
        type: number
      page:
        type: number

  LotList:
    type: array
    items:
      $ref: '#/definitions/Lot'

  Lot:
    type: object
    properties:
      title:
        type: string
        example: 'Phone'
      image:
        type: string
        example: 'base64'
        description: |
          When we create lot, fill image as base64 without metadata with type
          Example: https://pastebin.com/WSwumqD2
      description:
        type: string
      current_price:
        type: number
        example: 12.33
      estimated_price:
        type: number
        example: 120.00
      status:
        type: string
        enum: [0, 1, 2]
        description: >
          `0` - PENDING
          `1` - PROCESS
          `2` - CLOSED
        example: 0
        default: 0
        readOnly: true
      start_time:
        type: string
        example: '2004-10-19 10:23:54'
        pattern: '\d{4}-\d{2}-\d{2}\s\d{2}\:\d{2}:\d{2}'
      end_time:
        type: string
        example: '2004-10-19 10:23:54'
        pattern: '\d{4}-\d{2}-\d{2}\s\d{2}\:\d{2}:\d{2}'
      user_id:
        type: integer
        readOnly: true
      order:
        $ref: '#/definitions/Order'
        description: 'Only on lot page (lots.show)'
      bids:
        type: array
        $ref: '#/definitions/Bid'
        description: 'Only on lot page (lots.show)'
      created_at:
        type: string
        readOnly: true
      updated_at:
        type: string
        readOnly: true
    required:
      - title
      - current_price
      - estimated_price
      - start_time
      - end_time

  AppError:
    type: object
    properties:
      description:
        type: string
      message:
        type: string

  SignIn:
    type: object
    properties:
      email:
        type: string
        example: 'seller@g.com'
      password:
        type: string
        example: '12345678'
    required:
      - email
      - password

  PasswordRecovery:
    type: object
    properties:
      email:
        type: string
        example: 'seller@g.com'
    required:
      - email

  PasswordUpdate:
    type: object
    properties:
      password:
        type: string
        example: '12345678'
      password_confirmation:
        type: string
        example: '12345678'
    required:
      - password
      - password_confirmation

  ValidationItem:
    type: object
    properties:
      field:
        type: string
      message:
        type: string
      validation:
        type: string

  ValidationError:
    type: object
    properties:
      errors:
        type: array
        items:
          $ref: '#/definitions/ValidationItem'
      message:
        type: string

  User:
    type: object
    properties:
      id:
        type: integer
        required: false
        readOnly: true
      email:
        type: string
        example: 'seller@g.com'
      phone:
        type: string
        example: '234234237423'
      password:
        type: string
        example: '12345678'
      password_confirmation:
        type: string
        example: '12345678'
        description: 'Only for requests'
      first_name:
        type: string
        example: 'FirstName'
      lastname:
        type: string
        example: 'LastName'
      birth_day:
        format: date
        pattern: '\d{4}-\d{1,2}-\d{1,2}'
        type: string
        example: '1996-11-10'
      created_at:
        type: string
        readOnly: true
      updated_at:
        type: string
        readOnly: true
    required:
      - email
      - password
      - password_confirmation
      - phone
      - first_name
      - lastname
      - birthday
